{"ast":null,"code":"// importing all the libraries and moosules.\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\n\n// insitial state for reducers\nconst initialProductsState = {\n  allProducts: [],\n  cart: [],\n  cartItems: 0,\n  flashMessage: null,\n  sort: [],\n  productDetails: null\n};\n\n// creating a reducer and action Items\nconst products = createSlice({\n  name: 'products',\n  initialState: initialProductsState,\n  reducers: {\n    setProducts(state, actions) {\n      if (state.sort.length > 0) {\n        actions.payload.sort((a, b) => a.price - b.price);\n      }\n      state.allProducts = actions.payload;\n    },\n    getCartValue(state, actions) {\n      const cart = JSON.parse(localStorage.getItem('CART'));\n      state.cartItems = (cart === null || cart === void 0 ? void 0 : cart.length) || 0;\n    },\n    getCartProducts(state) {\n      state.cart = JSON.parse(localStorage.getItem('CART')) || [];\n    },\n    getProductDetails(state, actions) {\n      const {\n        payload\n      } = actions;\n      console.log(payload, state.allProducts);\n      state.productDetails = state.allProducts.filter(i => Number(i.id) === Number(payload))[0];\n      console.log(state.productDetails);\n    },\n    deleteProduct(state, actions) {\n      state.allProducts = state.allProducts.filter(i => Number(i.id) !== Number(actions.payload));\n    },\n    updateProducts(state, actions) {\n      state.allProducts = state.allProducts.map(i => {\n        if (Number(i.id) === Number(actions.payload.id)) {\n          return actions.payload;\n        }\n        return i;\n      });\n    },\n    setFlashMessage(state, actions) {\n      console.log(actions.payload);\n      state.flashMessage = actions.payload;\n    },\n    sortProducts(state, actions) {\n      state.sort = [actions.payload];\n      state.allProducts.sort((a, b) => a.price - b.price);\n    },\n    removeSort(state, actions) {\n      state.sort = state.sort.filter(i => i !== actions.payload);\n      state.allProducts.sort((a, b) => a.id - b.id);\n    },\n    addToCart(state, actions) {\n      console.log(actions);\n      const item = {\n        ...actions.payload\n      };\n      //get from localStorage\n      const itemInCart = JSON.parse(localStorage.getItem('CART'));\n      console.log(itemInCart);\n      if (!itemInCart || itemInCart.length < 1) {\n        item.quantity = 1;\n        console.log(item);\n        localStorage.setItem('CART', JSON.stringify([item]));\n        state.cartItems = 1;\n        // flash message\n        state.flashMessage = \"Product Added To Cart\";\n        return;\n      }\n      console.log(1);\n      //check Item already exists in cart\n      let isItemExists = false;\n      itemInCart.forEach((i, index, arr) => {\n        if (i.id === item.id) {\n          arr[index].quantity = Number(arr[index].quantity) + 1;\n          isItemExists = true;\n        }\n      });\n      console.log(isItemExists);\n      if (isItemExists) {\n        localStorage.setItem('CART', JSON.stringify(itemInCart));\n        state.cartItems = itemInCart.length;\n        // flash message\n        state.flashMessage = \"Product Added To Cart\";\n        return;\n      }\n      console.log(2);\n\n      //add to cart\n      item.quantity = 1;\n      itemInCart.push(item);\n\n      //add to localStorage\n      localStorage.setItem('CART', JSON.stringify(itemInCart));\n      // flash message\n      state.flashMessage = \"Product Added To Cart\";\n      state.cartItems = itemInCart.length;\n    },\n    // addNewProduct(state, actions) {\n    //     const {payload} = actions;\n    //     const newProduct = {\n    //         category: payload.category,\n    //         description: payload.description,\n    //         id: Number(payload.id),\n    //         image: payload.image,\n    //         price: payload.price,\n    //         rating: {\n    //             rate: payload.rate, \n    //             count: payload.count\n    //         },\n    //         title: payload.title\n    //     }\n\n    //     console.log(newProduct);\n    //     state.allProducts.push(newProduct);\n    //     // flash message\n    //     state.flashMessage = \"Product Added Successfully\"\n    // },\n    deleteProductFromCart(state, actions) {\n      const cart = state.cart.filter(i => Number(i.id) !== Number(actions.payload));\n      console.log(cart);\n      localStorage.setItem('CART', JSON.stringify(cart));\n      state.cartItems = cart.length || 0;\n      state.cart = cart;\n      state.flashMessage = \"deleted Successfully!!\";\n    }\n  }\n});\n\n// creating store and passing to the components\nconst store = configureStore({\n  reducer: products.reducer\n});\n\n// async actions \n//fetches the all products fromt he database\nexport const fetchProducts = () => {\n  return async dispatch => {\n    const fetchAllProducts = async () => {\n      const response = await fetch('https://ecommerce-api-ebon.vercel.app/products');\n      if (!response.ok) {\n        throw new Error('Something went wrong - unavle to fetch Products');\n      }\n      const {\n        data\n      } = await response.json();\n      dispatch(products.actions.setProducts(data.products));\n    };\n    try {\n      await fetchAllProducts();\n    } catch (err) {\n      dispatch(products.actions.setFlashMessage(\"Something went wrong!\"));\n    }\n  };\n};\n\n// inserts a new product into the database\nexport const addNewProduct = productData => {\n  return async dispatch => {\n    const fetchAllProducts = async () => {\n      const response = await fetch('https://ecommerce-api-ebon.vercel.app/products/create', {\n        method: \"POST\",\n        body: JSON.stringify({\n          product: productData\n        }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong -- fetchAllProducts');\n      }\n      const {\n        data\n      } = await response.json();\n      dispatch(products.actions.setFlashMessage(data.message));\n    };\n\n    // error handling\n    try {\n      await fetchAllProducts();\n    } catch (err) {\n      dispatch(products.actions.setFlashMessage(\"Something went wrong!\"));\n    }\n  };\n};\n\n// takes id and delete the record with that id\nexport const deleteProduct = id => {\n  return async dispatch => {\n    const deleteP = async () => {\n      const response = await fetch(`https://ecommerce-api-ebon.vercel.app/products/${id}`, {\n        method: \"DELETE\"\n      });\n      const {\n        data\n      } = await response.json();\n      dispatch(products.actions.deleteProduct(id));\n      dispatch(products.actions.setFlashMessage(data.message));\n    };\n\n    // error handling\n    try {\n      await deleteP();\n    } catch (err) {\n      dispatch(products.actions.setFlashMessage(\"Something went wrong!\"));\n    }\n  };\n};\n\n// used to update the products with specific id\nexport const updateProduct = (id, productData) => {\n  return async dispatch => {\n    const updateP = async () => {\n      const response = await fetch(`https://ecommerce-api-ebon.vercel.app/products/${id}/update_quantity`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          product: {\n            ...productData,\n            ...productData.rating\n          }\n        }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Something went wrong -- not updated');\n      }\n      const {\n        data\n      } = await response.json();\n      dispatch(products.actions.updateProducts(data.product));\n      dispatch(products.actions.setFlashMessage(data.message));\n    };\n\n    // error handling\n    try {\n      await updateP();\n    } catch (err) {\n      console.log(err);\n      dispatch(products.actions.setFlashMessage(\"Something went wrong!\"));\n    }\n  };\n};\nexport default store;\nexport const actions = products.actions;","map":{"version":3,"names":["configureStore","createSlice","initialProductsState","allProducts","cart","cartItems","flashMessage","sort","productDetails","products","name","initialState","reducers","setProducts","state","actions","length","payload","a","b","price","getCartValue","JSON","parse","localStorage","getItem","getCartProducts","getProductDetails","console","log","filter","i","Number","id","deleteProduct","updateProducts","map","setFlashMessage","sortProducts","removeSort","addToCart","item","itemInCart","quantity","setItem","stringify","isItemExists","forEach","index","arr","push","deleteProductFromCart","store","reducer","fetchProducts","dispatch","fetchAllProducts","response","fetch","ok","Error","data","json","err","addNewProduct","productData","method","body","product","headers","message","deleteP","updateProduct","updateP","rating"],"sources":["D:/Master's Projects/react-simple-ecommerce-app-main/Ecommerce Store/src/store/index.js"],"sourcesContent":["// importing all the libraries and moosules.\r\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\r\n\r\n// insitial state for reducers\r\nconst initialProductsState = { \r\n            allProducts: [], \r\n            cart: [], \r\n            cartItems: 0, \r\n            flashMessage: null, \r\n            sort: [], \r\n            productDetails: null \r\n        };\r\n\r\n// creating a reducer and action Items\r\nconst products = createSlice({\r\n    name: 'products',\r\n    initialState: initialProductsState,\r\n    reducers: {\r\n        setProducts(state, actions) {\r\n            if(state.sort.length > 0) {\r\n                actions.payload.sort((a, b) => a.price - b.price);\r\n            }\r\n            state.allProducts = actions.payload;\r\n        },\r\n        getCartValue(state, actions) {\r\n            const cart = JSON.parse(localStorage.getItem('CART'));\r\n            state.cartItems = cart?.length || 0;\r\n        },\r\n        getCartProducts(state){\r\n            state.cart = JSON.parse(localStorage.getItem('CART')) || [];\r\n        },\r\n        getProductDetails(state, actions) {\r\n            const {payload} = actions;\r\n            console.log(payload, state.allProducts)\r\n            state.productDetails = state.allProducts.filter((i) => Number(i.id) === Number(payload))[0];\r\n            console.log(state.productDetails)\r\n        },\r\n        deleteProduct(state, actions) {\r\n            state.allProducts = state.allProducts.filter((i) => Number(i.id) !== Number(actions.payload))\r\n        },\r\n        updateProducts(state, actions) {\r\n            state.allProducts = state.allProducts.map((i) => {\r\n                if(Number(i.id) === Number(actions.payload.id)) {\r\n                    return actions.payload;\r\n                }\r\n                return i;\r\n            })\r\n        },\r\n        setFlashMessage(state, actions) {\r\n            console.log(actions.payload)\r\n            state.flashMessage = actions.payload;\r\n        },\r\n        sortProducts(state, actions) {\r\n            state.sort = [actions.payload]\r\n            state.allProducts.sort((a, b) => a.price - b.price);\r\n        },\r\n        removeSort(state, actions) {\r\n            state.sort = state.sort.filter((i) => i !== actions.payload);\r\n            state.allProducts.sort((a,b) => a.id - b.id);\r\n        },\r\n        addToCart(state, actions) {\r\n            console.log(actions);\r\n            const item = {...actions.payload};\r\n            //get from localStorage\r\n            const itemInCart = JSON.parse(localStorage.getItem('CART'));\r\n            console.log(itemInCart);\r\n            if(!itemInCart || itemInCart.length < 1) {\r\n                item.quantity = 1;\r\n                console.log(item);\r\n                localStorage.setItem('CART', JSON.stringify([item]));\r\n                state.cartItems = 1;\r\n                 // flash message\r\n                state.flashMessage = \"Product Added To Cart\"\r\n                return;\r\n            }\r\n\r\n            console.log(1);\r\n            //check Item already exists in cart\r\n            let isItemExists = false;\r\n            itemInCart.forEach((i, index, arr) => {\r\n                if(i.id === item.id) {\r\n                    arr[index].quantity = Number(arr[index].quantity) + 1;\r\n                    isItemExists = true;\r\n                }\r\n            })\r\n            console.log(isItemExists);\r\n\r\n            if(isItemExists) {\r\n                localStorage.setItem('CART', JSON.stringify(itemInCart));\r\n                state.cartItems = itemInCart.length;\r\n                 // flash message\r\n                state.flashMessage = \"Product Added To Cart\"\r\n                return;\r\n            }\r\n            console.log(2);\r\n\r\n            //add to cart\r\n            item.quantity = 1;\r\n            itemInCart.push(item);\r\n\r\n            //add to localStorage\r\n            localStorage.setItem('CART', JSON.stringify(itemInCart))\r\n             // flash message\r\n             state.flashMessage = \"Product Added To Cart\"\r\n             state.cartItems = itemInCart.length;\r\n        },\r\n        // addNewProduct(state, actions) {\r\n        //     const {payload} = actions;\r\n        //     const newProduct = {\r\n        //         category: payload.category,\r\n        //         description: payload.description,\r\n        //         id: Number(payload.id),\r\n        //         image: payload.image,\r\n        //         price: payload.price,\r\n        //         rating: {\r\n        //             rate: payload.rate, \r\n        //             count: payload.count\r\n        //         },\r\n        //         title: payload.title\r\n        //     }\r\n\r\n        //     console.log(newProduct);\r\n        //     state.allProducts.push(newProduct);\r\n        //     // flash message\r\n        //     state.flashMessage = \"Product Added Successfully\"\r\n        // },\r\n        deleteProductFromCart(state, actions) {\r\n            const cart = state.cart.filter((i) => Number(i.id) !== Number(actions.payload))\r\n            console.log(cart);\r\n            localStorage.setItem('CART', JSON.stringify(cart));\r\n            state.cartItems = cart.length || 0;\r\n            state.cart = cart;\r\n            state.flashMessage = \"deleted Successfully!!\"\r\n        }\r\n    }\r\n});\r\n\r\n// creating store and passing to the components\r\nconst store = configureStore({\r\n    reducer: products.reducer\r\n});\r\n\r\n// async actions \r\n//fetches the all products fromt he database\r\nexport const fetchProducts = () => {\r\n    return async (dispatch) => {\r\n\r\n        const fetchAllProducts = async() => {\r\n            const response = await fetch('https://ecommerce-api-ebon.vercel.app/products');\r\n            \r\n            if(!response.ok) {\r\n                throw new Error('Something went wrong - unavle to fetch Products');\r\n            }\r\n            const { data } = await response.json();\r\n            dispatch(products.actions.setProducts(data.products))\r\n        }\r\n\r\n        try {\r\n           await fetchAllProducts()\r\n        } catch(err) {\r\n            dispatch(products.actions.setFlashMessage(\"Something went wrong!\"))\r\n        }\r\n\r\n    };\r\n}\r\n\r\n// inserts a new product into the database\r\nexport const addNewProduct = (productData) => {\r\n    return async (dispatch) => {\r\n\r\n        const fetchAllProducts = async() => {\r\n            const response = await fetch('https://ecommerce-api-ebon.vercel.app/products/create', {\r\n                method: \"POST\",\r\n                body: JSON.stringify({\r\n                    product: productData\r\n                }),\r\n                headers: {\"Content-type\":\"application/json\"}\r\n            });\r\n            \r\n            if(!response.ok) {\r\n                throw new Error('Something went wrong -- fetchAllProducts');\r\n            }\r\n            const {data} = await response.json();\r\n           dispatch(products.actions.setFlashMessage(data.message));\r\n        }\r\n\r\n        // error handling\r\n        try {\r\n           await fetchAllProducts()\r\n        } catch(err) {\r\n            dispatch(products.actions.setFlashMessage(\"Something went wrong!\"));\r\n        }\r\n\r\n    };\r\n}\r\n\r\n// takes id and delete the record with that id\r\nexport const deleteProduct = (id) => {\r\n    return async (dispatch) => {\r\n        const deleteP = async () => {\r\n            const response = await fetch(`https://ecommerce-api-ebon.vercel.app/products/${id}`, {\r\n                method: \"DELETE\"\r\n            });\r\n\r\n            const {data} = await response.json();\r\n            dispatch(products.actions.deleteProduct(id));\r\n            dispatch(products.actions.setFlashMessage(data.message));\r\n        }\r\n        \r\n        // error handling\r\n        try {\r\n            await deleteP();\r\n        } catch(err) {\r\n            dispatch(products.actions.setFlashMessage(\"Something went wrong!\"))\r\n        }\r\n    }\r\n}\r\n\r\n// used to update the products with specific id\r\nexport const updateProduct = (id, productData) => {\r\n    return async (dispatch) => {\r\n\r\n        const updateP = async() => {\r\n            const response = await fetch(`https://ecommerce-api-ebon.vercel.app/products/${id}/update_quantity`, {\r\n                method: \"PUT\",\r\n                body: JSON.stringify({\r\n                    product: {\r\n                        ...productData,\r\n                        ...productData.rating\r\n                    }\r\n                }),\r\n                headers: {\"Content-type\":\"application/json\"}\r\n            });\r\n            \r\n            if(!response.ok) {\r\n                throw new Error('Something went wrong -- not updated');\r\n            }\r\n            const {data} = await response.json();\r\n\r\n            dispatch(products.actions.updateProducts(data.product));\r\n            dispatch(products.actions.setFlashMessage(data.message));\r\n        }\r\n\r\n        // error handling\r\n        try {\r\n           await updateP()\r\n        } catch(err) {\r\n            console.log(err);\r\n            dispatch(products.actions.setFlashMessage(\"Something went wrong!\"));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default store;\r\n\r\nexport const actions = products.actions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}